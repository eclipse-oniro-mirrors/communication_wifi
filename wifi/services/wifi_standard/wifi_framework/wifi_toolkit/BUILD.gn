# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//foundation/communication/dhcp/dhcp_lite.gni")
  import("//foundation/communication/wifi/wifi/wifi_lite.gni")
} else {
  import("//build/ohos.gni")
  import("//foundation/communication/wifi/wifi/wifi.gni")
}

local_base_sources = [
  "$WIFI_ROOT_DIR/frameworks/native/src/wifi_p2p_msg.cpp",
  "config/wifi_config_file_spec.cpp",
  "config/wifi_settings.cpp",
  "log/log_helper.c",
  "net_helper/arp_checker.cpp",
  "net_helper/base_address.cpp",
  "net_helper/dhcpd_interface.cpp",
  "net_helper/dns_checker.cpp",
  "net_helper/http_request.cpp",
  "net_helper/if_config.cpp",
  "net_helper/ip_tools.cpp",
  "net_helper/ipv4_address.cpp",
  "net_helper/ipv6_address.cpp",
  "net_helper/mac_address.cpp",
  "net_helper/network_interface.cpp",
  "net_helper/raw_socket.cpp",
  "utils/wifi_common_event_helper.cpp",
  "utils/wifi_encryption_util.cpp",
  "utils/wifi_global_func.cpp",
]

local_base_include_dirs = [
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_sta",
  "$WIFI_ROOT_DIR/interfaces/inner_api",
  "$WIFI_ROOT_DIR/frameworks/native/interfaces",
  "$WIFI_ROOT_DIR/services/wifi_standard/include",
  "$WIFI_ROOT_DIR/utils/inc",
]

if (defined(ohos_lite)) {
  shared_library("wifi_toolkit") {
    sources = local_base_sources
    include_dirs = local_base_include_dirs
    include_dirs += [
      "$DHCP_ROOT_DIR/interfaces/inner_api/interfaces",
      "$DHCP_ROOT_DIR/interfaces/inner_api/include",
      "$DHCP_ROOT_DIR/interfaces/kits/c",
      "$DHCP_ROOT_DIR/services",
    ]

    deps = [ "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared" ]

    defines = [
      "OHOS_ARCH_LITE",
      "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num",
    ]

    configs -= [ "//build/lite/config:language_cpp" ]
    cflags_cc = [
      "-std=c++17",
      "-fno-rtti",
    ]
    ldflags = [
      "-fPIC",
      "-Wl,-E",
    ]
  }
} else {
  ohos_shared_library("wifi_toolkit") {
    branch_protector_ret = "pac_ret"

    sanitize = {
      cfi = true
      boundary_sanitize = true
      cfi_cross_dso = true
      debug = false
    }
    install_enable = true
    sources = local_base_sources
    sources += [
      "utils/network_parser.cpp",
      "utils/softap_parser.cpp",
      "utils/wifi_app_parser.cpp",
      "utils/wifi_cert_utils.cpp",
      "utils/wifi_notification_util.cpp",
      "utils/xml_parser.cpp",
    ]

    include_dirs = local_base_include_dirs
    include_dirs += [
      "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_country_code",
      "$WIFI_ROOT_DIR/utils/inc",
    ]

    deps = [ "$WIFI_ROOT_DIR/utils:wifi_utils" ]

    defines = [
      "STA_INSTANCE_MAX_NUM=$wifi_feature_with_sta_num",
      "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num",
    ]

    if (wifi_feature_with_encryption) {
      defines += [ "FEATURE_ENCRYPTION_SUPPORT" ]
    }

    if (wifi_feature_with_random_mac_addr) {
      defines += [ "SUPPORT_RANDOM_MAC_ADDR" ]
    }
    if (wifi_feature_with_scan_control) {
      defines += [ "SUPPORT_SCAN_CONTROL" ]
    }

    if (wifi_feature_with_hdi_chip_supported) {
      defines += [ "HDI_CHIP_INTERFACE_SUPPORT" ]
    }

    external_deps = [
      "ability_base:want",
      "ability_base:zuri",
      "ability_runtime:wantagent_innerkits",
      "c_utils:utils",
      "certificate_manager:cert_manager_sdk",
      "common_event_service:cesfwk_innerkits",
      "dhcp:dhcp_sdk",
      "dhcp:dhcp_utils",
      "distributed_notification_service:ans_innerkits",
      "eventhandler:libeventhandler",
      "hilog:libhilog",
      "i18n:intl_util",
      "image_framework:image_native",
      "ipc:ipc_single",
      "jsoncpp:jsoncpp",
      "libxml2:libxml2",
      "relational_store:native_rdb",
    ]

    if (defined(global_parts_info) && defined(global_parts_info.startup_init)) {
      external_deps += [
        "init:libbeget_proxy",
        "init:libbegetutil",
      ]
      defines += [ "INIT_LIB_ENABLE" ]
    }

    public_deps = []

    if (wifi_feature_with_encryption) {
      external_deps += [ "huks:libhukssdk" ]
    }
    cflags_cc = [
      "-std=c++17",
      "-fno-rtti",
    ]

    ldflags = [
      "-fPIC",
      "-Wl,-E",
    ]

    part_name = "wifi"
    subsystem_name = "communication"
  }
}
