# Copyright (C) 2024-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//foundation/communication/wifi/wifi/wifi_lite.gni")
} else {
  import("//build/ohos.gni")
  import("//foundation/communication/wifi/wifi/wifi.gni")
}

local_base_sources = [
  "external_wifi_common_builder_manager.cpp",
  "external_wifi_filter_builder_manager.cpp",
  "network_selection_manager.cpp",
  "network_selection_utils.cpp",
  "network_selector_factory.cpp",
  "network_selector_impl.cpp",
  "wifi_comparator_impl.cpp",
  "wifi_filter_impl.cpp",
  "wifi_scorer_impl.cpp",
]

local_base_include_dirs = [
  "$WIFI_ROOT_DIR/services/wifi_standard/sdk/include",
  "$WIFI_ROOT_DIR/interfaces/inner_api",
  "$WIFI_ROOT_DIR/frameworks/native/interfaces",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common",
  "$WIFI_ROOT_DIR/services/wifi_standard/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/network_status_history",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_country_code",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_network_stats",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/network_black_list",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/common",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/wifi_hal_interface",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/client/idl_client",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/client/idl_client/idl_interface",
  "$WIFI_ROOT_DIR/utils/inc",
]

if (defined(ohos_lite)) {
  shared_library("network_select") {
    sources = local_base_sources
    include_dirs = local_base_include_dirs
    include_dirs += [
      "//base/hiviewdfx/hilog_lite/interfaces/native/innerkits",
      "//third_party/bounds_checking_function/include",
    ]

    deps = [
      "$WIFI_ROOT_DIR/base:wifi_base",
      "$WIFI_ROOT_DIR/frameworks/native:wifi_sdk",
      "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common:wifi_common_service",
      "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit:wifi_toolkit",
      "$WIFI_ROOT_DIR/utils:wifi_utils",
    ]

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "init:libbegetutil",
    ]

    configs -= [ "//build/lite/config:language_cpp" ]
    cflags = memory_optimization_cflags
    cflags_cc = memory_optimization_cflags_cc
    ldflags = memory_optimization_ldflags
    cflags_cc += [
      "-std=c++17",
      "-fno-rtti",
    ]

    defines = [ "OHOS_ARCH_LITE" ]
    ldflags += [
      "-fPIC",
      "-Wl,-E",
    ]
  }
} else {
  ohos_static_library("network_select") {
    branch_protector_ret = "pac_ret"

    sanitize = {
      cfi = true  # Enable/disable control flow integrity detection
      boundary_sanitize = false  # Enable boundary san detection
      cfi_cross_dso = true  # Cross-SO CFI Checks
      integer_overflow = false  # Enable integer overflow detection
      ubsan = false  # Enable some Ubsan options
      cfi_vcall_icall_only = true
      debug = false
    }
    sources = local_base_sources

    include_dirs = local_base_include_dirs
    cflags = memory_optimization_cflags
    cflags_cc = memory_optimization_cflags_cc
    ldflags = memory_optimization_ldflags
    cflags_cc += [
      "-std=c++17",
      "-fno-rtti",
    ]

    ldflags += [
      "-fPIC",
      "-Wl,-E",
    ]

    deps = [
      "$WIFI_ROOT_DIR/base:wifi_base",
      "$WIFI_ROOT_DIR/utils:wifi_utils",
    ]

    if (wifi_feature_network_selection) {
      defines = [ "FEATURE_ITNETWORK_PREFERRED_SUPPORT" ]
    }

    external_deps = [
      "ability_runtime:app_manager",
      "hilog:libhilog",
      "init:libbegetutil",
      "samgr:samgr_proxy",
    ]
    part_name = "wifi"
    subsystem_name = "communication"
  }
}
