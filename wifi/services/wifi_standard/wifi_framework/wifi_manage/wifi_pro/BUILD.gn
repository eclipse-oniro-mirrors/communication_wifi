# Copyright (C) 2023-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/communication/wifi/wifi/wifi.gni")

ohos_static_library("wifi_pro") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true  # Enable/disable control flow integrity detection
    boundary_sanitize = true  # Enable boundary san detection
    cfi_cross_dso = true  # Cross-SO CFI Checks
    integer_overflow = true  # Enable integer overflow detection
    ubsan = true  # Enable some Ubsan options
    debug = false
  }
  include_dirs = [
    "$WIFI_ROOT_DIR/frameworks/native/interfaces",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_sta",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_scan",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_self_cure",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_p2p",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_pro",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/wifi_hal_interface",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_pro",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/network_select",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/network_black_list",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/network_status_history",
    "$WIFI_ROOT_DIR/utils/inc",
  ]

  sources = [
    "wifi_pro_interface.cpp",
    "wifi_pro_service.cpp",
    "wifi_pro_state_machine.cpp",
    "wifi_pro_utils.cpp",
  ]

  deps = [
    "$WIFI_ROOT_DIR/base:wifi_base",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/network_select:network_select",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common:wifi_common_service",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit:wifi_toolkit",
    "$WIFI_ROOT_DIR/utils:wifi_utils",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "netmanager_base:net_conn_manager_if",
  ]

  defines = []

  if (wifi_feature_wifi_pro_ctrl) {
    defines += [ "FEATURE_WIFI_PRO_SUPPORT" ]
  }

  defines += [ "FEATURE_SELF_CURE_SUPPORT" ]

  cflags = memory_optimization_cflags
  cflags_cc = memory_optimization_cflags_cc
  cflags_cc += [
    "-std=c++17",
    "-Wall",
  ]

  ldflags = [
    "-fPIC",
    "-Wl,-E",
  ]

  part_name = "wifi"
  subsystem_name = "communication"
}
