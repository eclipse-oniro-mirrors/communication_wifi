# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/test.gni")
import("//foundation/communication/wifi/wifi/wifi.gni")

##############################fuzztest##########################################
ohos_fuzztest("WifiToolkitFuzzTest") {
  module_out_path = fuzz_test_output_path
  fuzz_config_file = "$WIFI_ROOT_DIR/test/fuzztest/wifi_sta/wifitoolkit_fuzzer"

  include_dirs = [
    "$WIFI_ROOT_DIR/base/utils",
    "$WIFI_ROOT_DIR/base/shared_util",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/wifi_asset",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_sta",
    "$WIFI_ROOT_DIR/interfaces/inner_api",
    "$WIFI_ROOT_DIR/frameworks/native/interfaces",
    "$WIFI_ROOT_DIR/services/wifi_standard/include",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/network_status_history",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_country_code",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/network_select",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_self_cure",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_scan",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_p2p",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_sub_manage",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_controller",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_p2p/hid2d",
    "$WIFI_ROOT_DIR/utils/inc",
    "$WIFI_ROOT_DIR/frameworks/native/src",
    "$WIFI_ROOT_DIR/test/fuzztest/fuzz_common_func",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
  ]

  defines = [
    "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num",
    "STA_INSTANCE_MAX_NUM=$wifi_feature_with_sta_num",
    "FEATURE_AP_SUPPORT",
    "FEATURE_STA_SUPPORT",
    "FEATURE_P2P_SUPPORT",
    "private=public",
    "SUPPORT_ClOUD_WIFI_ASSET",
    "FEATURE_ENCRYPTION_SUPPORT",
    "SUPPORT_LOCAL_RANDOM_MAC",
  ]

  if (is_asan || use_clang_coverage) {
    defines += [ "DTFUZZ_TEST" ]
  }

  sources = [
    "$WIFI_ROOT_DIR/base/utils/wifi_app_parser.cpp",
    "$WIFI_ROOT_DIR/base/utils/xml_parser.cpp",
    "$WIFI_ROOT_DIR/base/shared_util/wifi_watchdog_utils.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/network_parser.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/package_parser.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/softap_parser.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/wifi_encryption_util.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/wifi_global_func.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/wifi_asset/wifi_asset_manager.cpp",
    "$WIFI_ROOT_DIR/frameworks/native/src/wifi_p2p_msg.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/network_select/network_selection_manager.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/network_select/network_selector_factory.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_channel_helper.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_sensor_scene.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_service_manager.cpp",
    "$WIFI_ROOT_DIR/frameworks/native/src/network_selection.cpp",
    "wifitoolkit_fuzzer.cpp",
  ]

  deps = [
    "$WIFI_ROOT_DIR/base:wifi_base",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit:wifi_toolkit",
    "$WIFI_ROOT_DIR/utils:wifi_utils",
  ]

  external_deps = [
    "ability_runtime:extension_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "cJSON:cjson",
    "dhcp:dhcp_sdk",
    "dhcp:dhcp_utils",
    "hilog:libhilog",
    "huks:libhukssdk",
    "hicollie:libhicollie",
    "ipc:ipc_single",
    "init:libbegetutil",
    "libxml2:libxml2",
    "netstack:http_client",
    "samgr:samgr_proxy",
    "window_manager:libdm_lite",
    "netmanager_base:net_conn_manager_if",
  ]

  if (wifi_feature_with_sta_asset) {
    external_deps += [ "asset:asset_sdk" ]
    defines += [ "SUPPORT_ClOUD_WIFI_ASSET" ]
  }

  part_name = "wifi"
  subsystem_name = "communication"
}