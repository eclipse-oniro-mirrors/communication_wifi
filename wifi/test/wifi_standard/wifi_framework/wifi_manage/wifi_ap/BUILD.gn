# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/communication/wifi/wifi/wifi.gni")
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap",
  ]
}
ohos_unittest("WifiApServiceTest") {
  module_out_path = "wifi/ap_test"

  sanitize = {
    cfi = true  # Enable/disable control flow integrity detection
    boundary_sanitize = false  # Enable boundary san detection
    cfi_cross_dso = true  # Cross-SO CFI Checks
    integer_overflow = false  # Enable integer overflow detection
    ubsan = false  # Enable some Ubsan options
    cfi_vcall_icall_only = true
    debug = false
  }

  sources = [
    "$WIFI_ROOT_DIR/base/state_machine/src/state.cpp",
    "$WIFI_ROOT_DIR/base/utils/xml_parser.cpp",
    "$WIFI_ROOT_DIR/frameworks/native/src/wifi_hid2d_msg.cpp",
    "$WIFI_ROOT_DIR/frameworks/native/src/wifi_msg.cpp",
    "$WIFI_ROOT_DIR/frameworks/native/src/wifi_p2p_msg.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_config_use.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_idle_state.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_monitor.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_root_state.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_service.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_started_state.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_state_machine.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/ap_stations_manager.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap/wifi_ap_nat_manager.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_channel_helper.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_cmd_client.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/base_address.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/dhcpd_interface.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/if_config.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/ip_tools.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/ipv4_address.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/ipv6_address.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper/mac_address.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/wifi_code_convert.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/wifi_global_func.cpp",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils/wifi_randommac_helper.cpp",
    "$WIFI_ROOT_DIR/test/wifi_standard/wifi_framework/wifi_manage/wifi_native/Mock/mock_wifi_sta_hal_interface.cpp",
    "$WIFI_ROOT_DIR/test/wifi_standard/wifi_framework/wifi_manage/wifi_native/Mock/mock_wifi_supplicant_hal_interface.cpp",
    "$WIFI_ROOT_DIR/test/wifi_standard/wifi_framework/wifi_toolkit/unittest/Mock/mock_wifi_config_center.cpp",
    "../../wifi_manage/wifi_sta/Mock/mock_dhcp_service.cpp",
    "./Mock/mock_ap_state_machine.cpp",
    "./Mock/mock_network_interface.cpp",
    "./Mock/mock_system_interface.cpp",
    "./Mock/mock_wifi_ap_hal_interface.cpp",
    "./Mock/mock_wifi_settings.cpp",
    "./Mock/operator_overload.cpp",
    "ap_config_use_test.cpp",
    "ap_idle_state_test.cpp",
    "ap_monitor_test.cpp",
    "ap_root_state_test.cpp",
    "ap_service_test.cpp",
    "ap_started_state_test.cpp",
    "ap_state_machine_test.cpp",
    "ap_stations_manager_test.cpp",
    "global_test.cpp",
    "wifi_ap_nat_manager_test.cpp",
  ]
  include_dirs = [
    "./",
    "../",
    "./Mock/",
    "$WIFI_ROOT_DIR/test/wifi_standard/wifi_framework/wifi_toolkit/unittest/Mock",
    "$WIFI_ROOT_DIR/interfaces/inner_api",
    "$WIFI_ROOT_DIR/frameworks/native/interfaces",
    "$WIFI_ROOT_DIR/base/cRPC/include",
    "$WIFI_ROOT_DIR/base/utils",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_ap",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_sta",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/common",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/wifi_hal_interface",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/client/idl_client",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_native/client/idl_client/idl_interface",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common/wifi_country_code",
    "$WIFI_ROOT_DIR/utils/inc",
    "$WIFI_ROOT_DIR/services/wifi_standard/include",
    "$WIFI_ROOT_DIR/frameworks/native/src",
    "$WIFI_ROOT_DIR/test/wifi_standard/wifi_framework/wifi_manage/wifi_ap/Mock",
    "$WIFI_ROOT_DIR/base/state_machine/include",
  ]
  ldflags = [
    "-fPIC",
    "--coverage",
    "-Wl,-E",
    "-Wl,-rpath=/system/lib/platformsdk",
    "-Wl,--wrap=system",
    "-Wl,--wrap=RegisterDhcpClientCallBack",
    "-Wl,--wrap=StartDhcpClient",
    "-Wl,--wrap=StopDhcpClient",
    "-Wl,--wrap=RegisterDhcpServerCallBack",
    "-Wl,--wrap=StartDhcpServer",
    "-Wl,--wrap=StopDhcpServer",
    "-Wl,--wrap=PutDhcpRange",
    "-Wl,--wrap=RemoveDhcpRange",
    "-Wl,--wrap=RemoveAllDhcpRange",
    "-Wl,--wrap=SetDhcpRange",
    "-Wl,--wrap=SetDhcpName",
    "-Wl,--wrap=GetDhcpClientInfos",
  ]

  deps = [
    "$WIFI_ROOT_DIR/base:wifi_base",
    "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_manage/wifi_common:wifi_common_service",
    "$WIFI_ROOT_DIR/utils:wifi_utils",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "c_utils:utils",
    "dhcp:dhcp_sdk",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "jsoncpp:jsoncpp",
    "libxml2:libxml2",
    "netmanager_base:net_conn_manager_if",
  ]

  if (defined(global_parts_info.powermgr_battery_manager)) {
    external_deps += [ "battery_manager:batterysrv_client" ]
  }

  defines = [
    "AP_INTF=\"$wifi_feature_with_ap_intf\"",
    "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num",
    "private=public",
    "SUPPORT_NAT",
  ]

  if (wifi_feature_with_dhcp_disable) {
    defines += [ "WIFI_DHCP_DISABLED" ]
  }

  part_name = "wifi"
  subsystem_name = "communication"
}
