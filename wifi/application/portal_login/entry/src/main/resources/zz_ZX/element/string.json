{
    "string":[
        {
            "name":"actions_menu_user_agent",
            "value":"[TS_855844]_Browser UA"
        },
        {
            "name":"contextmenu_open_in_browser",
            "value":"[TS_922302]_Open in Browser"
        },
        {
            "name":"site_setting_single_website_title",
            "value":"[TS_881176]_%s settings"
        },
        {
            "name":"user_agent_harmony",
            "value":"[TS_869551]_HarmonyOS"
        },
        {
            "name":"compatibility_mode_of_the_mobile_version",
            "value":"[TS_1035323]_Mobile site (Compatibility mode)"
        },
        {
            "name":"compatibility_mode_of_the_PC_version",
            "value":"[TS_1035326]_Desktop site (Compatibility mode)"
        },
         {
            "name":"continue_visit",
            "value":"[TS_1002771]_Continue to this site?"
        },
        {
            "name":"ssl_normal_error_msg",
            "value":"[TS_851559]_This site's SSL certificate has expired or is untrusted. There may be a security risk if you continue."
        },
        {
            "name":"ssl_error_dialog_continue_btn",
            "value":"[TS_851544]_Continue"
        },
        {
            "name":"confirm_dialog_cancel",
            "value":"[TS_851446]_Cancel"
        }
    ]
}

  want.SetElementName("com.wifiservice.portallogin", "EntryAbility");
    want.SetParam("url", mPortalUrl);
    want.SetParam("shouldShowBrowseItem", deviceType != ProductDeviceType::TV);
    WIFI_LOGI("portal login wifi netId is %{public}d, deviceType is %{public}d", netId, deviceType);
    OHOS::ErrCode err = WifiNotificationUtil::GetInstance().StartAbility(want);
    if (err != ERR_OK) {
        WIFI_LOGI("portal login StartAbility is failed %{public}d", err);
        WriteBrowserFailedForPortalHiSysEvent(err, mPortalUrl);
        AAFwk::Want wantBrowser;
        wantBrowser.SetParam("netId", netId);
        std::string bundle = WifiSettings::GetInstance().GetPackageName("BROWSER_BUNDLE");
        wantBrowser.SetAction(PORTAL_ACTION);
        wantBrowser.SetUri(mPortalUrl);
        wantBrowser.AddEntity(PORTAL_ENTITY);
        wantBrowser.SetBundle(bundle);
        WIFI_LOGI("wifi netId is %{public}d, deviceType is %{public}d", netId, deviceType);
        OHOS::ErrCode err = WifiNotificationUtil::GetInstance().StartAbility(wantBrowser);
        if (err != ERR_OK) {
            WIFI_LOGI("wantbrowser portal StartAbility is failed %{public}d", err);
        }
    }