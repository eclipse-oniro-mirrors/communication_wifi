# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

domain: COMMUNICATION

# Start or stop Wi-Fi switch
WIFI_STATE:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi enable or disable event}
  TYPE: {type: STRING, desc: Service type}
  OPER_TYPE: {type: INT32, desc: 0 is enable and 1 is disable}

# Connect or disconnect Wi-Fi
WIFI_CONNECTION:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi connection event}
  TYPE: {type: INT32, desc: 0 is connect and 1 is disconnect}
  PACKAGE_NAME: {type: STRING, desc: Package name}

# Scans Wi-Fi hotspots
WIFI_SCAN:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi scan event}
  EXECUTE_RESULT: {type: INT32, desc: 0 is scan fail and 1 is scan success}
  PACKAGE_NAME: {type: STRING, desc: Package name}

# Wi-Fi event received
WIFI_EVENT_RECEIVED:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi event}
  EVENT_TYPE: {type: STRING, desc: Event type}
  VALUE: {type: INT32, desc: Event value}

# Wi-Fi band event received
WIFI_BAND:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi band}
  BAND: {type: INT32, desc: band info} # 1->2.4G, 2->5G, default 0 Auto

# Wi-Fi signal event received
WIFI_SIGNAL:
  __BASE: {type: STATISTIC, level: MINOR, tag: PowerStats, desc: Wifi signal event}
  DIRECTION: {type: INT32, desc: wifi signal data in or data out} # 0->UP,1->DOWN,2->UPDOWN,3->NONE
  TXPACKETS: {type: INT32, desc: wifi signal tx packets}
  RXPACKETS: {type: INT32, desc: wifi signal rx packets}

WIFI_ABDISCONNECT:
  __BASE: {type: FAULT, level: MINOR, desc: Wifi abnormal disconnect}
  ABNORMAL_DISCONNECT_REASON_CODE: {type: STRING, desc: error code}
  AP_CONN_INFO: {type: STRING, desc: ap connection info}
  AP_INFO: {type: STRING, desc: ap info}
  IS_ACTIVE_DISCONNECT: {type: INT32, desc: is active disconnect}
  PUBLIC_ESS_COUNT: {type: INT32, desc: public ess count}
  SUB_ERROR_CODE: {type: STRING, desc: sub error code}

WIFI_CHR_EVENT:
  __BASE: {type: STATISTIC, level: MINOR, desc: Wifi chr event}
  EVENT_NAME: {type: STRING, desc: event name}
  EVENT_VALUE: {type: STRING, desc: event value}

WIFI_KPI:
  __BASE: {type: STATISTIC, level: MINOR, desc: Wifi kpi}
  ABNORMAL_DISCONNECT_COUNT: {type: INT32, desc: Wifi abnormal disconnect count}
  CONNECTED_COUNT: {type: INT32, desc: Wifi connect success count}
  CONNECTED_DURATION: {type: INT32, desc: Wifi connect success duration}
  CONNECTING_DURATION: {type: INT32, desc: Wifi connecting duration}
  CONNECT_TOTAL_COUNT: {type: INT32, desc: Wifi connect total count}
  DISCONNECT_CNT: {type: INT32, desc: Wifi disconnect count}
  OPEN_COUNT: {type: INT32, desc: Wifi open count}
  OPEN_SUCCESS_COUNT: {type: INT32, desc: Wifi open success count}
  
WIFI_KPI_SSID:
  __BASE: {type: STATISTIC, level: MINOR, desc: Wifi KPI SSID}
  ABNORMAL_DISCONNECT_COUNT: {type: INT32, desc: sum of abnormal disconnection}
  APSSID: {type: STRING, desc: SSID of an AP}
  ASSOC_COUNT: {type: INT32, desc: sum of association}
  ASSOC_DURATION: {type: INT32, desc: duration of association}
  ASSOC_REJECT_FULL_COUNT: {type: INT32, desc: sum of assoc reject access full}
  ASSOC_SUCCESS_COUNT: {type: INT32, desc: sum of associated}
  AUTH_COUNT: {type: INT32, desc: sum of authentication}
  AUTH_DURATION: {type: INT32, desc: duration of authentication}
  AUTH_SUCCESS_COUNT: {type: INT32, desc: sum of authenticated}
  CONNECTED_COUNT: {type: INT32, desc: sum of connection successful}
  CONNECTED_DURATION: {type: INT32, desc: duration of keep wifi connection}
  CONNECTING_DURATION: {type: INT32, desc: duration of connecting period}
  CONNECT_TOTAL_COUNT: {type: INT32, desc: sum of connection}
  DHCP_DURATION: {type: INT32, desc: duration of dhcp}
  DHCP_SUCCESS_COUNT: {type: INT32, desc: sum of dhcp successfully}
  DISCONNECT_COUNT: {type: INT32, desc: sum of disconnection}
  IP_DHCP_COUNT: {type: INT32, desc: sum of dhcp}