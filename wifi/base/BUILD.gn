# Copyright (C) 2023-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//foundation/communication/wifi/wifi/wifi_lite.gni")
} else {
  import("//build/ohos.gni")
  import("//foundation/communication/wifi/wifi/wifi.gni")
}

local_base_sources = [
  "security_utils/src/wifi_openssl_utils.cpp",
  "shared_util/wifi_watchdog_utils.cpp",
  "state_machine/src/handler.cpp",
  "state_machine/src/internal_message.cpp",
  "state_machine/src/message_queue.cpp",
  "state_machine/src/state.cpp",
  "state_machine/src/state_machine.cpp",
]

local_base_include_dirs = [
  "$WIFI_ROOT_DIR/base/cRPC/include",
  "$WIFI_ROOT_DIR/base/security_utils/include",
  "$WIFI_ROOT_DIR/base/state_machine/include",
  "$WIFI_ROOT_DIR/base/inner_api",
  "$WIFI_ROOT_DIR/base/shared_util",
  "$WIFI_ROOT_DIR/base/utils",
  "$WIFI_ROOT_DIR/interfaces/inner_api",
  "$WIFI_ROOT_DIR/frameworks/native/interfaces",
  "$WIFI_ROOT_DIR/frameworks/native/c_adapter/inc",
  "$WIFI_ROOT_DIR/services/wifi_standard/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
  "$WIFI_ROOT_DIR/utils/inc",
]

if (defined(ohos_lite)) {
  shared_library("wifi_base") {
    sources = local_base_sources

    include_dirs = local_base_include_dirs

    deps = [ "$WIFI_ROOT_DIR/base/cRPC:crpc_client" ]

    external_deps = [
      "hilog_lite:hilog_shared",
      "openssl:libcrypto_shared",
      "openssl:libssl_shared",
    ]

    configs -= [ "//build/lite/config:language_cpp" ]

    cflags = memory_optimization_cflags
    cflags_cc = memory_optimization_cflags_cc
    ldflags = memory_optimization_ldflags
    cflags_cc += [
      "-std=c++17",
      "-fno-rtti",
    ]

    ldflags += [
      "-fPIC",
      "-Wl,-E",
    ]

    defines = [ "OHOS_ARCH_LITE" ]
  }
} else {
  config("wifi_base_exported_header") {
    visibility = [ ":*" ]
    include_dirs = local_base_include_dirs
  }

  ohos_shared_library("wifi_base") {
    branch_protector_ret = "pac_ret"

    sanitize = {
      cfi = true  # Enable/disable control flow integrity detection
      boundary_sanitize = false  # Enable boundary san detection
      cfi_cross_dso = true  # Cross-SO CFI Checks
      integer_overflow = false  # Enable integer overflow detection
      ubsan = false  # Enable some Ubsan options
      cfi_vcall_icall_only = true
      debug = false
    }

    install_enable = true
    sources = local_base_sources

    sources += [
      "shared_util/wifi_notification_util.cpp",
      "utils/wifi_app_parser.cpp",
      "utils/wifi_battery_utils.cpp",
      "utils/wifi_datashare_utils.cpp",
      "utils/xml_parser.cpp",
    ]
    include_dirs = local_base_include_dirs
    include_dirs += [ "$WIFI_ROOT_DIR/base/utils" ]

    deps = [ "$WIFI_ROOT_DIR/utils:wifi_utils" ]
    defines = []

    external_deps = [
      "ability_base:want",
      "ability_runtime:ability_connect_callback_stub",
      "ability_runtime:extension_manager",
      "c_utils:utils",
      "cJSON:cjson",
      "data_share:datashare_common",
      "data_share:datashare_consumer",
      "hicollie:libhicollie",
      "hilog:libhilog",
      "ipc:ipc_single",
      "libxml2:libxml2",
      "openssl:libcrypto_shared",
      "openssl:libssl_shared",
      "safwk:system_ability_fwk",
      "samgr:samgr_proxy",
    ]
    if (wifi_ffrt_enable) {
      external_deps += [ "ffrt:libffrt" ]
      defines += [ "WIFI_FFRT_ENABLE" ]
    }
    if (defined(global_parts_info) &&
        defined(global_parts_info.powermgr_battery_manager)) {
      external_deps += [ "battery_manager:batterysrv_client" ]
      defines += [ "HAS_BATTERY_MANAGER_PART" ]
    }
    cflags = memory_optimization_cflags
    cflags_cc = memory_optimization_cflags_cc
    ldflags = memory_optimization_ldflags
    cflags_cc += [
      "-std=c++17",
      "-fno-rtti",
    ]

    ldflags += [
      "-fPIC",
      "-Wl,-E",
    ]

    public_configs = [ ":wifi_base_exported_header" ]
    version_script = "libwifi_base.map"
    part_name = "wifi"
    subsystem_name = "communication"
    innerapi_tags = [ "platformsdk" ]
  }
}
